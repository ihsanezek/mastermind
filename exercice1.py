import random

# --- Param√®tres g√©n√©raux -----------------------------------------------------
TAILLE_CODE   = 4
ESSAIS_MAX    = 10
PALETTE       = ["Vert", "Noir", "Rouge", "Jaune", "Orange", "Marron"]

# --- G√©n√©ration du code secret ----------------------------------------------
def generer_code_secret():
    """Cr√©e al√©atoirement la combinaison que le joueur doit deviner."""
    return [random.choice(PALETTE) for _ in range(TAILLE_CODE)]

# --- Saisie et validation de la proposition ---------------------------------
def saisir_proposition():
    """Invite le joueur √† entrer sa combinaison et v√©rifie la saisie."""
    while True:
        saisie = input(
            f"Entrez {TAILLE_CODE} couleurs (s√©par√©es par un espace) parmi "
            f"{', '.join(PALETTE)} : "
        ).strip()
        tentative = saisie.split()

        if len(tentative) != TAILLE_CODE:
            print(f"‚ö†Ô∏è  Il faut fournir exactement {TAILLE_CODE} couleurs.")
            continue
        if any(c not in PALETTE for c in tentative):
            print("‚ö†Ô∏è  Utilisez uniquement les couleurs propos√©es.")
            continue

        return tentative

# --- √âvaluation de la tentative ---------------------------------------------
def evaluer_tentative(secret, tentative):
    """Retourne le nombre de pions bien plac√©s et mal plac√©s."""
    bien_places = sum(s == t for s, t in zip(secret, tentative))

    # On ne garde que les positions qui ne sont pas d√©j√† correctes
    reste_secret    = [s for s, t in zip(secret, tentative) if s != t]
    reste_tentative = [t for s, t in zip(secret, tentative) if s != t]

    mal_places = 0
    for couleur in reste_tentative:
        if couleur in reste_secret:
            mal_places += 1
            reste_secret.remove(couleur)  # √©vite de compter deux fois la m√™me couleur

    return bien_places, mal_places

# --- Boucle principale du jeu -----------------------------------------------
def lancer_mastermind():
    print("üéØ Bienvenue dans cette version revisit√©e du Mastermind !")
    code_secret      = generer_code_secret()
    essais_restants  = ESSAIS_MAX

    while essais_restants:
        print(f"\nIl vous reste {essais_restants} essai(s).")
        tentative = saisir_proposition()
        bien, mal = evaluer_tentative(code_secret, tentative)

        print(f"R√©sultat ‚Üí {bien} bien plac√©(s), {mal} mal plac√©(s).")

        if bien == TAILLE_CODE:
            print("üèÜ Bravo ! Vous avez d√©couvert la combinaison secr√®te !")
            break

        essais_restants -= 1
    else:
        print("\nüí• Tous les essais sont √©puis√©s.")
        print("La combinaison secr√®te √©tait :", " ".join(code_secret))

# --- Ex√©cution directe du script --------------------------------------------
if __name__ == "__main__":
    lancer_mastermind()
